local game, workspace = game, workspace
local getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick = getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick
local Vector2new, Vector3zero, CFramenew, Color3fromRGB, Color3fromHSV, Drawingnew, TweenInfonew = Vector2.new, Vector3.zero, CFrame.new, Color3.fromRGB, Color3.fromHSV, Drawing.new, TweenInfo.new
local getupvalue, mousemoverel, tablefind, tableremove, stringlower, stringsub, mathclamp = debug.getupvalue, mousemoverel or (Input and Input.MouseMove), table.find, table.remove, string.lower, string.sub, math.clamp

local GameMetatable = getrawmetatable and getrawmetatable(game) or {
	__index = function(self, Index)
		return self[Index]
	end,
	__newindex = function(self, Index, Value)
		self[Index] = Value
	end
}

local __index = GameMetatable.__index
local __newindex = GameMetatable.__newindex
local getrenderproperty, setrenderproperty = getrenderproperty or __index, setrenderproperty or __newindex
local GetService = __index(game, "GetService")

-- Services
local RunService = GetService(game, "RunService")
local UserInputService = GetService(game, "UserInputService")
local TweenService = GetService(game, "TweenService")
local Players = GetService(game, "Players")

-- Service Methods
local LocalPlayer = __index(Players, "LocalPlayer")
local Camera = __index(workspace, "CurrentCamera")
local FindFirstChild, FindFirstChildOfClass = __index(game, "FindFirstChild"), __index(game, "FindFirstChildOfClass")
local GetDescendants = __index(game, "GetDescendants")
local WorldToViewportPoint = __index(Camera, "WorldToViewportPoint")
local GetPartsObscuringTarget = __index(Camera, "GetPartsObscuringTarget")
local GetMouseLocation = __index(UserInputService, "GetMouseLocation")
local GetPlayers = __index(Players, "GetPlayers")

-- Variables
local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}
local Connect, Disconnect = __index(game, "DescendantAdded").Connect
local FrameSkipCounter, FrameSkipInterval = 0, 2 -- Frame skipping for performance

-- Environment Setup
if ExunysDeveloperAimbot and ExunysDeveloperAimbot.Exit then
	ExunysDeveloperAimbot:Exit()
end

getgenv().ExunysDeveloperAimbot = {
	DeveloperSettings = {
		UpdateMode = "RenderStepped",
		TeamCheckOption = "TeamColor",
		RainbowSpeed = 1
	},
	Settings = {
		Enabled = true,
		TeamCheck = false,
		AliveCheck = true,
		WallCheck = true,
		OffsetToMoveDirection = false,
		OffsetIncrement = 15,
		Sensitivity = 0.1, -- Increased for smoother CFrame transitions
		Sensitivity2 = 3.5,
		DynamicSensitivity = true, -- Enable dynamic sensitivity
		PredictionEnabled = true, -- Enable predictive aiming
		PredictionMultiplier = 0.1, -- Strength of prediction
		LockMode = 1,
		LockParts = {"Head", "HumanoidRootPart"}, -- Priority list
		TriggerKey = Enum.UserInputType.MouseButton2,
		Toggle = false
	},
	FOVSettings = {
		Enabled = true,
		Visible = true,
		Radius = 90,
		NumSides = 60,
		Thickness = 1,
		Transparency = 1,
		Filled = false,
		RainbowColor = false,
		RainbowOutlineColor = false,
		Color = Color3fromRGB(255, 255, 255),
		OutlineColor = Color3fromRGB(0, 0, 0),
		LockedColor = Color3fromRGB(255, 150, 150)
	},
	Blacklisted = {},
	FOVCircleOutline = Drawingnew("Circle"),
	FOVCircle = Drawingnew("Circle"),
	TargetDistance = 0, -- Store distance to target
	LastColor = nil, -- For smooth color transitions
	LockedPart = "Head" -- Current locked part
}

local Environment = getgenv().ExunysDeveloperAimbot
setrenderproperty(Environment.FOVCircle, "Visible", false)
setrenderproperty(Environment.FOVCircleOutline, "Visible", false)

-- Core Functions
local function SafeCall(func, ...)
	local success, result = pcall(func, ...)
	if not success then
		warn("Error in aimbot: " .. tostring(result))
	end
	return success, result
end

local function FixUsername(String)
	local Result
	for _, Value in next, GetPlayers(Players) do
		local Name = __index(Value, "Name")
		if stringsub(stringlower(Name), 1, #String) == stringlower(String) then
			Result = Name
		end
	end
	return Result
end

local function GetRainbowColor()
	local RainbowSpeed = Environment.DeveloperSettings.RainbowSpeed
	return Color3fromHSV(tick() % RainbowSpeed / RainbowSpeed, 1, 1)
end

local function ConvertVector(Vector)
	return Vector2new(Vector.X, Vector.Y)
end

local function CancelLock()
	Environment.Locked = nil
	Environment.LockedPart = Environment.Settings.LockParts[1]
	local FOVCircle = Environment.FOVCircle
	setrenderproperty(FOVCircle, "Color", Environment.FOVSettings.Color)
	__newindex(UserInputService, "MouseDeltaSensitivity", OriginalSensitivity)
	if Animation then
		Animation:Cancel()
	end
end

local function GetPredictedPosition(Character, LockPart, DeltaTime)
	local success, HumanoidRootPart = SafeCall(FindFirstChild, Character, "HumanoidRootPart")
	if success and HumanoidRootPart and Environment.Settings.PredictionEnabled then
		local success, Velocity = SafeCall(__index, HumanoidRootPart, "Velocity")
		local success2, CurrentPosition = SafeCall(__index, Character[LockPart], "Position")
		if success and success2 then
			return CurrentPosition + Velocity * DeltaTime * Environment.Settings.PredictionMultiplier
		end
	end
	return __index(Character[LockPart], "Position")
end

local IgnorableParts = {"Glass", "ForceField"} -- Parts to ignore in wall check

local function GetClosestPlayer()
	if not Environment.Locked then
		RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Radius or 2000
		for _, Value in next, GetPlayers(Players) do
			local success, Character = SafeCall(__index, Value, "Character")
			if not success or not Character or Value == LocalPlayer or tablefind(Environment.Blacklisted, __index(Value, "Name")) then
				continue
			end
			local Humanoid = FindFirstChildOfClass(Character, "Humanoid")
			if not Humanoid then continue end
			for _, LockPart in ipairs(Environment.Settings.LockParts) do
				if FindFirstChild(Character, LockPart) then
					local PartPosition = __index(Character[LockPart], "Position")
					local TeamCheckOption = Environment.DeveloperSettings.TeamCheckOption
					if Environment.Settings.TeamCheck and __index(Value, TeamCheckOption) == __index(LocalPlayer, TeamCheckOption) then
						continue
					end
					if Environment.Settings.AliveCheck and __index(Humanoid, "Health") <= 0 then
						continue
					end
					if Environment.Settings.WallCheck then
						local BlacklistTable = {}
						for _, Val in next, GetDescendants(__index(LocalPlayer, "Character")) do
							BlacklistTable[#BlacklistTable + 1] = Val
						end
						for _, Val in next, GetDescendants(Character) do
							BlacklistTable[#BlacklistTable + 1] = Val
						end
						local ObscuringParts = GetPartsObscuringTarget(Camera, {PartPosition}, BlacklistTable)
						local IsObscured = false
						for _, Part in ipairs(ObscuringParts) do
							local Material = __index(Part, "Material")
							local Name = __index(Part, "Name")
							if not tablefind(IgnorableParts, Material) and not tablefind(IgnorableParts, Name) then
								IsObscured = true
								break
							end
						end
						if IsObscured then
							continue
						end
					end
					local Vector, OnScreen, Distance = WorldToViewportPoint(Camera, PartPosition)
					Vector = ConvertVector(Vector)
					Distance = (GetMouseLocation(UserInputService) - Vector).Magnitude
					if Distance < RequiredDistance and OnScreen then
						RequiredDistance, Environment.Locked, Environment.LockedPart, Environment.TargetDistance = Distance, Value, LockPart, Distance
					end
				end
			end
		end
	elseif (GetMouseLocation(UserInputService) - ConvertVector(WorldToViewportPoint(Camera, __index(__index(Environment.Locked, "Character")[Environment.LockedPart], "Position")))).Magnitude > RequiredDistance then
		CancelLock()
	end
end

local function UpdateFOVCircle()
	local FOVCircle, FOVCircleOutline = Environment.FOVCircle, Environment.FOVCircleOutline
	if Environment.FOVSettings.Enabled and Environment.Settings.Enabled then
		for Index, Value in next, Environment.FOVSettings do
			if Index == "Color" or Index == "LockedColor" then
				continue
			end
			if pcall(getrenderproperty, FOVCircle, Index) then
				setrenderproperty(FOVCircle, Index, Value)
				setrenderproperty(FOVCircleOutline, Index, Value)
			end
		end
		local TargetColor = Environment.Locked and Environment.FOVSettings.LockedColor or (Environment.FOVSettings.RainbowColor and GetRainbowColor() or Environment.FOVSettings.Color)
		local OutlineColor = Environment.FOVSettings.RainbowOutlineColor and GetRainbowColor() or Environment.FOVSettings.OutlineColor
		if Environment.LastColor ~= TargetColor then
			Animation = TweenService:Create(FOVCircle, TweenInfonew(0.2, Enum.EasingStyle.Sine), {Color = TargetColor})
			Animation:Play()
			Environment.LastColor = TargetColor
		end
		setrenderproperty(FOVCircleOutline, "Color", OutlineColor)
		setrenderproperty(FOVCircleOutline, "Thickness", Environment.FOVSettings.Thickness + 1)
		setrenderproperty(FOVCircle, "Position", GetMouseLocation(UserInputService))
		setrenderproperty(FOVCircleOutline, "Position", GetMouseLocation(UserInputService))
	else
		setrenderproperty(FOVCircle, "Visible", false)
		setrenderproperty(FOVCircleOutline, "Visible", false)
	end
end

local function Load()
	OriginalSensitivity = __index(UserInputService, "MouseDeltaSensitivity")
	local Settings, FOVSettings, Offset = Environment.Settings, Environment.FOVSettings
	ServiceConnections.RenderSteppedConnection = Connect(__index(RunService, Environment.DeveloperSettings.UpdateMode), function()
		UpdateFOVCircle()
		if FrameSkipCounter % FrameSkipInterval == 0 then
			GetClosestPlayer()
		end
		FrameSkipCounter = FrameSkipCounter + 1
		if Running and Settings.Enabled then
			Offset = Settings.OffsetToMoveDirection and __index(FindFirstChildOfClass(__index(Environment.Locked, "Character"), "Humanoid"), "MoveDirection") * (mathclamp(Settings.OffsetIncrement, 1, 30) / 10) or Vector3zero
			if Environment.Locked then
				local DeltaTime = __index(RunService, "RenderStepped"):Wait()
				local LockedPosition_Vector3 = GetPredictedPosition(__index(Environment.Locked, "Character"), Environment.LockedPart, DeltaTime)
				local LockedPosition = WorldToViewportPoint(Camera, LockedPosition_Vector3 + Offset)
				local DynamicSensitivity = Settings.DynamicSensitivity and (Settings.Sensitivity2 * (1 - mathclamp(Environment.TargetDistance / RequiredDistance, 0.1, 1))) or Settings.Sensitivity2
				if Settings.LockMode == 2 then
					mousemoverel(
						(LockedPosition.X - GetMouseLocation(UserInputService).X) / DynamicSensitivity,
						(LockedPosition.Y - GetMouseLocation(UserInputService).Y) / DynamicSensitivity
					)
				else
					if Settings.Sensitivity > 0 then
						Animation = TweenService:Create(Camera, TweenInfonew(Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, LockedPosition_Vector3)})
						Animation:Play()
					else
						__newindex(Camera, "CFrame", CFramenew(Camera.CFrame.Position, LockedPosition_Vector3 + Offset))
					end
					__newindex(UserInputService, "MouseDeltaSensitivity", 0)
				end
				setrenderproperty(Environment.FOVCircle, "Color", FOVSettings.LockedColor)
			end
		end
	end)
	ServiceConnections.InputBeganConnection = Connect(__index(UserInputService, "InputBegan"), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle
		if Typing then return end
		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			if Toggle then
				Running = not Running
				if not Running then
					CancelLock()
				end
			else
				Running = true
			end
		end
	end)
	ServiceConnections.InputEndedConnection = Connect(__index(UserInputService, "InputEnded"), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle
		if Toggle or Typing then return end
		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			Running = false
			CancelLock()
		end
	end)
end

-- Typing Check
ServiceConnections.TypingStartedConnection = Connect(__index(UserInputService, "TextBoxFocused"), function()
	Typing = true
end)
ServiceConnections.TypingEndedConnection = Connect(__index(UserInputService, "TextBoxFocusReleased"), function()
	Typing = false
end)

-- Functions
function Environment:Exit()
	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end
	Load = nil; ConvertVector = nil; CancelLock = nil; GetClosestPlayer = nil; GetRainbowColor = nil; FixUsername = nil; UpdateFOVCircle = nil; GetPredictedPosition = nil
	self.FOVCircle:Remove()
	self.FOVCircleOutline:Remove()
	getgenv().ExunysDeveloperAimbot = nil
end

function Environment.Restart()
	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end
	Load()
end

function Environment:Blacklist(Username)
	assert(Username, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #2 \"Username\" <string>.")
	Username = FixUsername(Username)
	assert(Username, "EXUNYS_AIMBOT-V3.Blacklist: User "..Username.." couldn't be found.")
	self.Blacklisted[#self.Blacklisted + 1] = Username
end

function Environment:Whitelist(Username)
	assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #2 \"Username\" <string>.")
	Username = FixUsername(Username)
	assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." couldn't be found.")
	local Index = tablefind(self.Blacklisted, Username)
	assert(Index, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." is not blacklisted.")
	tableremove(self.Blacklisted, Index)
end

function Environment.GetClosestPlayer()
	GetClosestPlayer()
	local Value = Environment.Locked
	CancelLock()
	return Value
end

Environment.Load = Load
setmetatable(Environment, {__call = Load})

return Environment
